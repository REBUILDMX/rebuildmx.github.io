(self.webpackChunkmahayanadocs=self.webpackChunkmahayanadocs||[]).push([[558],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return u},kt:function(){return d}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),p=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},u=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),g=p(r),d=a,m=g["".concat(s,".").concat(d)]||g[d]||l[d]||i;return r?t.createElement(m,o(o({ref:n},u),{},{components:r})):t.createElement(m,o({ref:n},u))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=g;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=r[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},191:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return o},metadata:function(){return c},toc:function(){return s},default:function(){return u}});var t=r(2122),a=r(9756),i=(r(7294),r(3905)),o={title:"Recipe Generator",slug:"/R&D/recipe-generator"},c={unversionedId:"R&D/recipe-generator",id:"R&D/recipe-generator",isDocsHomePage:!1,title:"Recipe Generator",description:"AI based agroforestry recipe generator built on top of a knowledge graph database.",source:"@site/docs/R&D/recipe-generator.md",sourceDirName:"R&D",slug:"/R&D/recipe-generator",permalink:"/R&D/recipe-generator",version:"current",frontMatter:{title:"Recipe Generator",slug:"/R&D/recipe-generator"},sidebar:"docs",previous:{title:"Decentralized Food and Energy Production",permalink:"/decentralized-food-and-energy"},next:{title:"Hybrid Smart Contract",permalink:"/R&D/hybrid-smart-contract"}},s=[{value:"Inserting Data",id:"inserting-data",children:[]},{value:"Knowledge Graph Deductive Reasoning",id:"knowledge-graph-deductive-reasoning",children:[]},{value:"Querying Data",id:"querying-data",children:[]}],p={toc:s};function u(e){var n=e.components,r=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"AI based agroforestry recipe generator built on top of a knowledge graph database. "),(0,i.kt)("h3",{id:"inserting-data"},"Inserting Data"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// insert genus\nfunction taxonomicGenus(item) {\n    return `insert $g isa taxonomic-genus, has name "${item.genus}";`;\n}\n//insert species\nfunction taxonomicSpecies(item) {\n    return `insert $s isa taxonomic-species, has name "${item.species}";`;\n}\n//insert taxonomic relationship Genus and Species\nfunction taxonomicHierarchyGenusSpecies(item) {\n    const { genus, species } = item;\n    // match genus\n    let graqlInsertQuery = `match $g isa taxonomic-genus, has name "${genus}"; `;\n    // match species\n    graqlInsertQuery += `$s isa taxonomic-species, has name "${species}"; `;\n    // insert taxonomic-hierarchy\n    graqlInsertQuery +=\n        "insert (super-taxon: $g, sub-taxon: $s) isa taxonomic-hierarchy;";\n    return graqlInsertQuery;\n}\n')),(0,i.kt)("h3",{id:"knowledge-graph-deductive-reasoning"},"Knowledge Graph Deductive Reasoning"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'koppen-Af sub rule,\nwhen{\n    $loc isa location, has precipitation-annual $pannual, has precipitation-thresholdx10 $pthold10,\n    has temperature-min $tmin, has precipitation-dry $pdry;\n    $kop isa koppen, has classification "Af";\n    # A\n    $tmin >= 18;\n    $pannual >= $pthold10;\n    # f\n    $pdry >= 60;\n}, then{\n    (biome-of: $kop, biome-belongs:$loc) isa koppen-geiger;\n};\n')),(0,i.kt)("h3",{id:"querying-data"},"Querying Data"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"match \n \n$kg($loc,$kop) isa koppen-geiger; $loc isa location; $kop isa koppen;\n$kg2($sp,$kop) isa koppen-geiger; $sp isa taxonomic-species;  \n \nget;\noffset 0; limit 7;\n")))}u.isMDXComponent=!0}}]);